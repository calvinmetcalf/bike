{"ts":1347622704791,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"# ---------------------------------------------------------------------------\r\n# create_transfer_GDB.py\r\n# Created on: Tue May 11 2010 08:35:24 AM\r\n#   (generated by ArcGIS/ModelBuilder)\r\n# ---------------------------------------------------------------------------\r\n\r\n# Import system modules\r\nimport sys, string, os, arcpy\r\nfrom datetime import datetime\r\n\r\n# Create the Geoprocessor object\r\ngp = arcpy\r\ninstallDir = gp.GetInstallInfo(\"desktop\").get(\"InstallDir\")\r\n\r\n# Load required toolboxes...\r\ngp.AddToolbox(os.path.join(installDir, \"ArcToolbox/Toolboxes/Conversion Tools.tbx\"))\r\ngp.AddToolbox(os.path.join(installDir, \"ArcToolbox/Toolboxes/Data Management Tools.tbx\"))\r\ngp.AddToolbox(os.path.join(installDir, \"ArcToolbox/Toolboxes/Analysis Tools.tbx\"))\r\ngp.env.overwriteOutput = 1\r\n# gp.overwriteoutput = 1\r\ngp.env.qualifiedFieldNames = False\r\n\r\n# Parameters...\r\nXfer_folder = gp.GetParameterAsText(0)\r\nif (Xfer_folder == \"#\" or Xfer_folder == \"\"):\r\n    Xfer_folder = r\"S:\\HQ\\Planning\\DataResources\\GISDevelopment\\Bikes\\DataTransfer\\DataToCTPS\"\r\n\r\nXfer_GDB_name = gp.GetParameterAsText(1)\r\nif (Xfer_GDB_name == \"#\" or Xfer_GDB_name == \"\"):\r\n    Xfer_GDB_name = \"BikeDataXfer\" + datetime.now().strftime('%Y%m%d_%H%M%S') + \".mdb\"\r\nelse:\r\n    if (os.path.splitext(Xfer_GDB_name)[1] != u'.mdb'):\r\n        Xfer_GDB_name = Xfer_GDB_name + \".mdb\"\r\n\r\nSource_GDB = gp.GetParameterAsText(2)\r\nif (Source_GDB == \"#\" or Source_GDB == \"\"):\r\n    Source_GDB = r\"Database Connections\\Edit RoadInventory as Intern3.sde\"\r\n\r\nSource_2_GDB = gp.GetParameterAsText(3)\r\nif (Source_2_GDB == \"#\" or Source_2_GDB == \"\"):\r\n    if (gp.GetParameterAsText(2) != \"#\" and gp.GetParameterAsText(2) != \"\"):\r\n        Source_2_GDB = Source_GDB\r\n    else:\r\n        Source_2_GDB = r\"Database Connections\\Planning Development.sde\"\r\n\r\n# Local variables...\r\nProgressStep = 0\r\nNumProgressSteps = 19\r\n\r\nRoads = \"RoadSegments\"\r\nBIKES = \"BIKES\"\r\nPHYSICAL = \"PHYSICAL\"\r\nPropAndProg = \"ProgrammedAndProposed_bikes\"\r\nGreenways = \"Greenway_unpaved_bikes\"\r\nProgIndPolys = \"AttributesEnriched\"\r\nProgIndPolys2 = \"ProgAndProposed_reviewed\"\r\n\r\nXfer_GDB = os.path.join(Xfer_folder, Xfer_GDB_name)\r\nSource_Roads = os.path.join(Source_GDB, r\"gisRoadInventory.GISADMIN.RoadInventoryCore\\gisRoadInventory.GISADMIN.\" + Roads)\r\nSource_BIKES = os.path.join(Source_GDB, r\"gisRoadInventory.GISAdmin.\" + BIKES)\r\nSource_PHYSICAL = os.path.join(Source_GDB, r\"gisRoadInventory.GISAdmin.\" + PHYSICAL)\r\nSource_PropAndProg = os.path.join(Source_2_GDB, r\"gisdevelopment.GISPLANNER.BikeDevelopment\\gisDevelopment.GISPLANNER.\" + PropAndProg)\r\nSource_Greenways = os.path.join(Source_2_GDB, r\"gisdevelopment.GISPLANNER.BikeDevelopment\\gisDevelopment.GISPLANNER.\" + Greenways)\r\nSource_ProgIndPolys = os.path.join(Source_2_GDB, r\"gisdevelopment.GISPLANNER.BikeDevelopment\\gisDevelopment.GISPLANNER.\" + ProgIndPolys)\r\nSource_ProgIndPolys2 = os.path.join(Source_2_GDB, r\"gisdevelopment.GISPLANNER.BikeDevelopment\\gisDevelopment.GISPLANNER.\" + ProgIndPolys2)\r\n\r\nBikeFacilityStatus = os.path.join(Xfer_GDB, \"BikeFacilityStatus\")\r\nBikeFacilityType = os.path.join(Xfer_GDB, \"BikeFacilityType\")\r\nSurfaceType = os.path.join(Xfer_GDB, \"SurfaceType\")\r\nBayStateGreenway = os.path.join(Xfer_GDB, \"BayStateGreenway\")\r\nYN = os.path.join(Xfer_GDB, \"YN\")\r\n\r\nXfer_Roads = os.path.join(Xfer_GDB, \"RoadSegments\")\r\nXfer_Roads_Layer = \"RoadSegments_Layer\"\r\nXfer_BIKES = os.path.join(Xfer_GDB, \"BIKES\")\r\nXfer_PHYSICAL = os.path.join(Xfer_GDB, \"PHYSICAL\")\r\nXfer_PropAndProg = os.path.join(Xfer_GDB, PropAndProg)\r\nXfer_Greenways = os.path.join(Xfer_GDB, Greenways)\r\nXfer_ProgIndPolys = os.path.join(Xfer_GDB, ProgIndPolys)\r\nXfer_ProgIndPolys2 = os.path.join(Xfer_GDB, ProgIndPolys2)\r\n\r\nBikeSegsQuery = \"BikeSegsQuery\"\r\nPhysicalQueryTable = \"PhysicalQueryTable\"\r\nBikesQueryTable = \"BikesQueryTable\"\r\n\r\nBikeSegsTemp = os.path.join(Xfer_GDB, \"BikeSegsTemp\")\r\nBikeSegsTemp2 = os.path.join(Xfer_GDB, \"BikeSegsTemp2\")\r\nPhysicalTemp = os.path.join(Xfer_GDB, \"PhysicalTemp\")\r\n\r\ngp.SetProgressor(\"step\", \"Step \" + str(ProgressStep + 1) + \" of \" + str(NumProgressSteps), 0, NumProgressSteps, 1)\r\n\r\n# Process: Create Personal GDB...\r\ngp.AddMessage(\"Creating transfer geodatabase \" + Xfer_GDB + \"...\")\r\ngp.CreatePersonalGDB_management(Xfer_folder, Xfer_GDB_name)\r\nProgressStep = ProgressStep + 1\r\ngp.SetProgressorLabel(\"Step \" + str(ProgressStep + 1) + \" of \" + str(NumProgressSteps))\r\ngp.SetProgressorPosition(ProgressStep)\r\n\r\n# Process: Copy ProgrammedAndProposed_bikes_final...\r\ngp.AddMessage(\"Copying programmed and proposed bikes...\")\r\ngp.Copy_management(Source_PropAndProg, Xfer_PropAndProg, \"Feature Class\")\r\nProgressStep = ProgressStep + 1\r\ngp.SetProgressorLabel(\"Step \" + str(ProgressStep + 1) + \" of \" + str(NumProgressSteps))\r\ngp.SetProgressorPosition(ProgressStep)\r\n\r\n# Process: Copy Greenway_unpaved_bikes...\r\ngp.AddMessage(\"Copying greenways (minimally improved trails)...\")\r\ngp.Copy_management(Source_Greenways, Xfer_Greenways, \"Feature Class\")\r\nProgressStep = ProgressStep + 1\r\ngp.SetProgressorLabel(\"Step \" + str(ProgressStep + 1) + \" of \" + str(NumProgressSteps))\r\ngp.SetProgressorPosition(ProgressStep)\r\n\r\n# Process: Copy AttributesEnriched progress indicator polygons...\r\ngp.AddMessage(\"Copying progress indicator polygons...\")\r\ngp.Copy_management(Source_ProgIndPolys, Xfer_ProgIndPolys, \"Feature Class\")\r\ngp.Copy_management(Source_ProgIndPolys2, Xfer_ProgIndPolys2, \"Feature Class\")\r\nProgressStep = ProgressStep + 1\r\ngp.SetProgressorLabel(\"Step \" + str(ProgressStep + 1) + \" of \" + str(NumProgressSteps))\r\ngp.SetProgressorPosition(ProgressStep)\r\n\r\n# Process: Copy BIKES events table...\r\ngp.AddMessage(\"Copying complete BIKES event table...\")\r\ngp.TableToTable_conversion(Source_BIKES, Xfer_GDB, BIKES, \"NOT BikeFacilityType IS NULL\", \"\", \"\")\r\nProgressStep = ProgressStep + 1\r\ngp.SetProgressorLabel(\"Step \" + str(ProgressStep + 1) + \" of \" + str(NumProgressSteps))\r\ngp.SetProgressorPosition(ProgressStep)\r\n\r\n# Process: Index Seg ID in BIKES...\r\ngp.AddMessage(\"Indexing the ROADSEGMENT_ID field in the copied BIKES events...\")\r\ngp.AddIndex_management(Xfer_BIKES, \"RoadSegment_ID\", \"bikes_seg_idx\", \"NON_UNIQUE\", \"NON_ASCENDING\")\r\n\r\n# Process: Transfer BikeFacilityStatus domain...\r\ngp.AddMessage(\"Getting Facility Status domain from source database...\")\r\ngp.DomainToTable_management(Source_GDB, \"dmnBikeFacilityStatus\", BikeFacilityStatus, \"CODE\", \"DESCRIPTION\", \"\")\r\n\r\ngp.AddMessage(\"...and putting it in transfer database...\")\r\ngp.TableToDomain_management(BikeFacilityStatus, \"CODE\", \"DESCRIPTION\", Xfer_GDB, \"dmnBikeFacilityStatus\", \"Codes for status of bicycle facilities\", \"REPLACE\")\r\n\r\ngp.AddMessage(\"...and assigning it to appropriate field in BIKES event table...\")\r\ngp.AssignDomainToField_management(Xfer_BIKES, \"BikeFacilityStatus\", \"dmnBikeFacilityStatus\", \"\")\r\nProgressStep = ProgressStep + 1\r\ngp.SetProgressorLabel(\"Step \" + str(ProgressStep + 1) + \" of \" + str(NumProgressSteps))\r\ngp.SetProgressorPosition(ProgressStep)\r\n\r\n# Process: Transfer BikeFacilityType domain...\r\ngp.AddMessage(\"Getting Facility Type domain from source database...\")\r\ngp.DomainToTable_management(Source_GDB, \"dmnBikeFacilityType\", BikeFacilityType, \"CODE\", \"DESCRIPTION\", \"\")\r\n\r\ngp.AddMessage(\"...and putting it in transfer database...\")\r\ngp.TableToDomain_management(BikeFacilityType, \"CODE\", \"DESCRIPTION\", Xfer_GDB, \"dmnBikeFacilityType\", \"Codes for type of bicycle facility\", \"REPLACE\")\r\n\r\ngp.AddMessage(\"...and assigning it to appropriate fields...\")\r\ngp.AssignDomainToField_management(Xfer_BIKES, \"BikeFacilityType\", \"dmnBikeFacilityType\", \"\")\r\ngp.AssignDomainToField_management(Xfer_PropAndProg, \"BikeFacilityType\", \"dmnBikeFacilityType\", \"\")\r\ngp.AssignDomainToField_management(Xfer_Greenways, \"BikeFacilityType\", \"dmnBikeFacilityType\", \"\")\r\nProgressStep = ProgressStep + 1\r\ngp.SetProgressorLabel(\"Step \" + str(ProgressStep + 1) + \" of \" + str(NumProgressSteps))\r\ngp.SetProgressorPosition(ProgressStep)\r\n\r\n# Process: Transfer BayStateGreenway domain...\r\ngp.AddMessage(\"Getting Bay State Greenway domain from source database...\")\r\ngp.DomainToTable_management(Source_GDB, \"BayStateGreenway\", BayStateGreenway, \"CODE\", \"DESCRIPTION\", \"\")\r\n\r\ngp.AddMessage(\"...and putting it in transfer database...\")\r\ngp.TableToDomain_management(BayStateGreenway, \"CODE\", \"DESCRIPTION\", Xfer_GDB, \"dmnBayStateGreenway\", \"Codes for Bay State Greenway corridors\", \"REPLACE\")\r\n\r\ngp.AddMessage(\"...and assigning it to appropriate fields...\")\r\ngp.AssignDomainToField_management(Xfer_BIKES, \"BayStateGreenway\", \"dmnBayStateGreenway\", \"\")\r\ngp.AssignDomainToField_management(Xfer_PropAndProg, \"BayStateGreenway\", \"dmnBayStateGreenway\", \"\")\r\ngp.AssignDomainToField_management(Xfer_Greenways, \"BayStateGreenway\", \"dmnBayStateGreenway\", \"\")\r\nProgressStep = ProgressStep + 1\r\ngp.SetProgressorLabel(\"Step \" + str(ProgressStep + 1) + \" of \" + str(NumProgressSteps))\r\ngp.SetProgressorPosition(ProgressStep)\r\n\r\n# Process: Transfer YN domain...\r\ngp.AddMessage(\"Getting YN domain from source database...\")\r\ngp.DomainToTable_management(Source_GDB, \"dmnYN\", YN, \"CODE\", \"DESCRIPTION\", \"\")\r\n\r\ngp.AddMessage(\"...and putting it in transfer database...\")\r\ngp.TableToDomain_management(YN, \"CODE\", \"DESCRIPTION\", Xfer_GDB, \"dmnYN\", \"Codes for Yes/No\", \"REPLACE\")\r\n\r\ngp.AddMessage(\"...and assigning it to appropriate fields in BIKES event table...\")\r\ngp.AssignDomainToField_management(Xfer_BIKES, \"BSGProposed\", \"dmnYN\", \"\")\r\ngp.AssignDomainToField_management(Xfer_BIKES, \"BSGUltimate\", \"dmnYN\", \"\")\r\ngp.AssignDomainToField_management(Xfer_PropAndProg, \"BSGProposed\", \"dmnYN\", \"\")\r\ngp.AssignDomainToField_management(Xfer_PropAndProg, \"BSGUltimate\", \"dmnYN\", \"\")\r\ngp.AssignDomainToField_management(Xfer_Greenways, \"BSGProposed\", \"dmnYN\", \"\")\r\ngp.AssignDomainToField_management(Xfer_Greenways, \"BSGUltimate\", \"dmnYN\", \"\")\r\nProgressStep = ProgressStep + 1\r\ngp.SetProgressorLabel(\"Step \" + str(ProgressStep + 1) + \" of \" + str(NumProgressSteps))\r\ngp.SetProgressorPosition(ProgressStep)\r\n\r\n# Process: Copy PHYSICAL event table...\r\ngp.AddMessage(\"Copying complete PHYSICAL event table (will take a minute or two)...\")\r\ngp.TableToTable_conversion(Source_PHYSICAL, Xfer_GDB, PHYSICAL, \"\", \"\", \"\")\r\nProgressStep = ProgressStep + 1\r\ngp.SetProgressorLabel(\"Step \" + str(ProgressStep + 1) + \" of \" + str(NumProgressSteps))\r\ngp.SetProgressorPosition(ProgressStep)\r\n\r\n# Process: Copy RoadSegments...\r\ngp.AddMessage(\"Copying all road segments (will take a minute or two)...\")\r\ngp.FeatureClassToFeatureClass_conversion(Source_Roads, Xfer_GDB, Roads, \"\", \"\", \"\")\r\nProgressStep = ProgressStep + 1\r\ngp.SetProgressorLabel(\"Step \" + str(ProgressStep + 1) + \" of \" + str(NumProgressSteps))\r\ngp.SetProgressorPosition(ProgressStep)\r\ngp.AddMessage(\"Copied road segments: \" + str(gp.GetCount_management(Xfer_Roads)))\r\n\r\n# Process: Index Seg ID in RoadSegments...\r\ngp.AddMessage(\"Indexing the ROADSEGMENT_ID field in the copied road segments...\")\r\ngp.AddIndex_management(Xfer_Roads, \"ROADSEGMENT_ID\", \"rd_seg_copy_seg_idx\", \"UNIQUE\", \"NON_ASCENDING\")\r\nProgressStep = ProgressStep + 1\r\ngp.SetProgressorLabel(\"Step \" + str(ProgressStep + 1) + \" of \" + str(NumProgressSteps))\r\ngp.SetProgressorPosition(ProgressStep)\r\n\r\n# Process: Make Query Table...\r\ngp.AddMessage(\"Creating view of road segments having bike events...\")\r\ngp.env.qualifiedFieldNames = True\r\ngp.MakeQueryTable_management(Xfer_Roads + \";\" + Xfer_BIKES, \\\r\n                             BikeSegsQuery, \\\r\n                             \"USE_KEY_FIELDS\", \\\r\n                             BIKES + \".OBJECTID\", \\\r\n                             \"\", \\\r\n                             BIKES + \".RoadSegment_ID = \" + Roads + \".ROADSEGMENT_ID\")\r\n\r\n# Process: Save query table to temporary feature class\r\ngp.AddMessage(\"...and saving the view to a temporary feature class...\")\r\ngp.CopyFeatures_management(BikeSegsQuery, BikeSegsTemp)\r\ngp.env.qualifiedFieldNames = False\r\ngp.AddIndex_management(BikeSegsTemp, Roads + \"_ROADSEGMENT_ID\", \"SEG_TMP_ID_idx\", \"NON_UNIQUE\", \"NON_ASCENDING\")\r\n##gp.AddMessage(\"Saved query table of road segments<->BIKE events: \" + str(gp.GetCount_management(BikeSegsTemp)))\r\nProgressStep = ProgressStep + 1\r\ngp.SetProgressorLabel(\"Step \" + str(ProgressStep + 1) + \" of \" + str(NumProgressSteps))\r\ngp.SetProgressorPosition(ProgressStep)\r\n\r\n# Process: Create table of first OBJECTID for every ROADSEGMENT_ID\r\ngp.AddMessage(\"...and identifying and removing duplicate ROADSEGMENTs...\")\r\ngp.MakeFeatureLayer_management(BikeSegsTemp, Xfer_Roads_Layer, \"\", \"\", \"\")\r\n##gp.AddMessage(\"Feature layer of saved query table: \" + str(gp.GetCount_management(Xfer_Roads_Layer)))\r\ngp.Statistics_analysis(Xfer_Roads_Layer, BikeSegsTemp2, BIKES + \"_OBJECTID FIRST\", Roads + \"_ROADSEGMENT_ID\")\r\n##gp.AddMessage(\"Statistics on ROADSEGMENT_ID: \" + str(gp.GetCount_management(Xfer_Roads_Layer)))\r\ngp.AddIndex_management(BikeSegsTemp2, Roads + \"_ROADSEGMENT_ID\", \"SEG_TMP2_ID_idx\", \"UNIQUE\", \"NON_ASCENDING\")\r\ngp.AddIndex_management(BikeSegsTemp, BIKES + \"_OBJECTID\", \"SEG_TMP_BOID_idx\", \"NON_UNIQUE\", \"NON_ASCENDING\")\r\ngp.AddJoin_management(Xfer_Roads_Layer, Roads + \"_ROADSEGMENT_ID\", BikeSegsTemp2, Roads + \"_ROADSEGMENT_ID\", \"\")\r\ngp.SelectLayerByAttribute_management(Xfer_Roads_Layer, \"NEW_SELECTION\", \"BikeSegsTemp.BIKES_OBJECTID <> BikeSegsTemp2.FIRST_BIKES_OBJECTID\")\r\n##gp.AddMessage(\"Selected query table rows: \" + str(gp.GetCount_management(Xfer_Roads_Layer)))\r\ngp.RemoveJoin_management(Xfer_Roads_Layer, \"BikeSegsTemp2\")\r\ngp.DeleteFeatures_management(Xfer_Roads_Layer)\r\n##gp.AddMessage(\"Remaining rows in saved query table: \" + str(gp.GetCount_management(Xfer_Roads_Layer)))\r\nProgressStep = ProgressStep + 1\r\ngp.SetProgressorLabel(\"Step \" + str(ProgressStep + 1) + \" of \" + str(NumProgressSteps))\r\ngp.SetProgressorPosition(ProgressStep)\r\n\r\n# Process: Copy road segments to final feature class, cleaning up field names along the way...\r\ngp.AddMessage(\"...and copying non-duplicates to final feature class...\")\r\ngp.FeatureClassToFeatureClass_conversion(BikeSegsTemp, Xfer_GDB, Roads, \"\", \\\r\n                                         \"ROADSEGMENT_ID 'ROADSEGMENT_ID' true true false 4 Long 0 0 ,First,#,\" + BikeSegsTemp + \",\" + \\\r\n                                         Roads + \"_ROADSEGMENT_ID,-1,-1;\" + \\\r\n                                         \"ODOMETER 'ODOMETER' true true false 8 Double 0 0 ,First,#,\" + BikeSegsTemp + \",\" + \\\r\n                                         Roads + \"_ODOMETER,-1,-1;\" + \\\r\n                                         \"ASSIGNEDLENGTH 'ASSIGNEDLENGTH' true true false 8 Double 0 0 ,First,#,\" + BikeSegsTemp + \",\" + \\\r\n                                         Roads + \"_ASSIGNEDLENGTH,-1,-1;\" + \\\r\n                                         \"ASSIGNEDLENGTHSOURCE 'ASSIGNEDLENGTHSOURCE' true true false 2 Short 0 0 ,First,#,\" + BikeSegsTemp + \",\" + \\\r\n                                         Roads + \"_ASSIGNEDLENGTHSOURCE,-1,-1;\" + \\\r\n                                         \"STREETLIST_ID 'STREETLIST_ID' true true false 4 Long 0 0 ,First,#,\" + BikeSegsTemp + \",\" + \\\r\n                                         Roads + \"_STREETLIST_ID,-1,-1;\" + \\\r\n                                         \"LIFECYCLESTATUS 'LIFECYCLESTATUS' true true false 2 Short 0 0 ,First,#,\" + BikeSegsTemp + \",\" + \\\r\n                                         Roads + \"_LIFECYCLESTATUS,-1,-1;\" + \\\r\n                                         \"DateActive 'DateActive' true true false 8 Date 0 0 ,First,#,\" + BikeSegsTemp + \",\" + \\\r\n                                         Roads + \"_DateActive,-1,-1;\" + \\\r\n                                         \"Enabled 'Enabled' true true false 2 Short 0 0 ,First,#,\" + BikeSegsTemp + \",\" + \\\r\n                                         Roads + \"_Enabled,-1,-1;\" + \\\r\n                                         \"PrimaryRouteKey 'PrimaryRouteKey' true true false 20 Text 0 0 ,First,#,\" + BikeSegsTemp + \",\" + \\\r\n                                         Roads + \"_PrimaryRouteKey,-1,-1;\" + \\\r\n                                         \"TMP_RT_NUM 'TMP_RT_NUM' true true false 50 Text 0 0 ,First,#,\" + BikeSegsTemp + \",\" + \\\r\n                                         Roads + \"_TMP_RT_NUM,-1,-1;\" + \\\r\n                                         \"MileageCounted 'MileageCounted' true true false 2 Short 0 0 ,First,#,\" + BikeSegsTemp + \",\" + \\\r\n                                         Roads + \"_MileageCounted,-1,-1;\" + \\\r\n                                         \"LINK_ID 'LINK_ID' true true false 8 Double 0 0 ,First,#,\" + BikeSegsTemp + \",\" + \\\r\n                                         Roads + \"_LINK_ID,-1,-1;\" + \\\r\n                                         \"NavTeqLink 'NavTeqLink' true true false 1 Text 0 0 ,First,#,\" + BikeSegsTemp + \",\" + \\\r\n                                         Roads + \"_NavTeqLink,-1,-1;\" + \\\r\n                                         \"Date_Updated 'Date_Updated' true true false 8 Date 0 0 ,First,#,\" + BikeSegsTemp + \",\" + \\\r\n                                         Roads + \"_Date_Updated,-1,-1\", \"\")\r\n##gp.AddMessage(\"Rows in new road segments: \" + str(gp.GetCount_management(Xfer_Roads)))\r\n\r\n# Process: Clean up temporary RoadSegments objects...\r\ngp.AddMessage(\"...and cleaning up temporary objects...\")\r\ngp.Delete_management(BikeSegsTemp, \"\")\r\ngp.Delete_management(BikeSegsTemp2, \"\")\r\nProgressStep = ProgressStep + 1\r\ngp.SetProgressorLabel(\"Step \" + str(ProgressStep + 1) + \" of \" + str(NumProgressSteps))\r\ngp.SetProgressorPosition(ProgressStep)\r\n\r\n# Process: Add Attribute Index...\r\ngp.AddMessage(\"Indexing ROADSEGMENT_ID in final feature class...\")\r\ngp.AddIndex_management(Xfer_Roads, \"ROADSEGMENT_ID\", \"RI_SEG_ID_idx\", \"NON_UNIQUE\", \"NON_ASCENDING\")\r\n\r\n# Process: Make view of PHYSICAL event table...\r\ngp.AddMessage(\"Creating view of PHYSICAL events table...\")\r\n##gp.MakeTableView_management(Xfer_PHYSICAL, PhysicalQueryTable, \"\", \"\", \"\")\r\ngp.env.qualifiedFieldNames = True\r\ngp.MakeQueryTable_management(Xfer_PHYSICAL + \";\" + Xfer_Roads, \\\r\n                             PhysicalQueryTable, \\\r\n                             \"USE_KEY_FIELDS\", \\\r\n                             PHYSICAL + \".OBJECTID\", \\\r\n                             \"\", \\\r\n                             PHYSICAL + \".RoadSegment_ID = \" + Roads + \".ROADSEGMENT_ID\")\r\n\r\n# Process: Save view to temporary PHYSICAL table...\r\ngp.AddMessage(\"...and saving view to temporary table...\")\r\ngp.CopyRows_management(PhysicalQueryTable, PhysicalTemp)\r\ngp.env.qualifiedFieldNames = False\r\n\r\n# Process: Copy to final table, cleaning up field names along the way...\r\ngp.AddMessage(\"...and copying to final table, cleaning up field names along the way...\")\r\ngp.TableToTable_conversion(PhysicalTemp, Xfer_GDB, PHYSICAL, \"\", \\\r\n                           \"RoadSegment_ID 'RoadSegment_ID' true true false 4 Long 0 0 ,First,#,\" + PhysicalTemp + \",\" + PHYSICAL + \"_RoadSegment_ID,-1,-1;\" + \\\r\n                           \"FromMeasure 'FromMeasure' true true false 8 Double 0 0 ,First,#,\" + PhysicalTemp + \",\" + PHYSICAL + \"_FromMeasure,-1,-1;\" + \\\r\n                           \"ToMeasure 'ToMeasure' true true false 8 Double 0 0 ,First,#,\" + PhysicalTemp + \",\" + PHYSICAL + \"_ToMeasure,-1,-1;\" + \\\r\n                           \"LeftSidewalkWidth 'LeftSidewalkWidth' true true false 2 Short 0 0 ,First,#,\" + PhysicalTemp + \",\" + PHYSICAL + \"_LeftSidewalkWidth,-1,-1;\" + \\\r\n                           \"RightSidewalkWidth 'RightSidewalkWidth' true true false 2 Short 0 0 ,First,#,\" + PhysicalTemp + \",\" + PHYSICAL + \"_RightSidewalkWidth,-1,-1;\" + \\\r\n                           \"LeftShoulderWidth 'LeftShoulderWidth' true true false 2 Short 0 0 ,First,#,\" + PhysicalTemp + \",\" + PHYSICAL + \"_LeftShoulderWidth,-1,-1;\" + \\\r\n                           \"LeftShoulderType 'LeftShoulderType' true true false 2 Short 0 0 ,First,#,\" + PhysicalTemp + \",\" + PHYSICAL + \"_LeftShoulderType,-1,-1;\" + \\\r\n                           \"SurfaceWidth 'SurfaceWidth' true true false 2 Short 0 0 ,First,#,\" + PhysicalTemp + \",\" + PHYSICAL + \"_SurfaceWidth,-1,-1;\" + \\\r\n                           \"SurfaceType 'SurfaceType' true true false 2 Short 0 0 ,First,#,\" + PhysicalTemp + \",\" + PHYSICAL + \"_SurfaceType,-1,-1;\" + \\\r\n                           \"RightShoulderWidth 'RightShoulderWidth' true true false 2 Short 0 0 ,First,#,\" + PhysicalTemp + \",\" + PHYSICAL + \"_RightShoulderWidth,-1,-1;\" + \\\r\n                           \"RightShoulderType 'RightShoulderType' true true false 2 Short 0 0 ,First,#,\" + PhysicalTemp + \",\" + PHYSICAL + \"_RightShoulderType,-1,-1;\" + \\\r\n                           \"NumberOfTravelLanes 'NumberOfTravelLanes' true true false 2 Short 0 0 ,First,#,\" + PhysicalTemp + \",\" + PHYSICAL + \"_NumberOfTravelLanes,-1,-1;\" + \\\r\n                           \"OppositeNumberOfTravelLanes 'OppositeNumberOfTravelLanes' true true false 2 Short 0 0 ,First,#,\" + PhysicalTemp + \",\" + PHYSICAL + \"_OppositeNumberOfTravelLanes,-1,-1;\" + \\\r\n                           \"RightOfWayWidth 'RightOfWayWidth' true true false 2 Short 0 0 ,First,#,\" + PhysicalTemp + \",\" + PHYSICAL + \"_RightOfWayWidth,-1,-1;\" + \\\r\n                           \"MedianWidth 'MedianWidth' true true false 2 Short 0 0 ,First,#,\" + PhysicalTemp + \",\" + PHYSICAL + \"_MedianWidth,-1,-1;\" + \\\r\n                           \"MedianType 'MedianType' true true false 2 Short 0 0 ,First,#,\" + PhysicalTemp + \",\" + PHYSICAL + \"_MedianType,-1,-1;\" + \\\r\n                           \"Offset 'Offset' true true false 2 Short 0 0 ,First,#,\" + PhysicalTemp + \",\" + PHYSICAL + \"_Offset,-1,-1;\" + \\\r\n                           \"DateActive 'DateActive' true true false 8 Date 0 0 ,First,#,\" + PhysicalTemp + \",\" + PHYSICAL + \"_DateActive,-1,-1;\" + \\\r\n                           \"Date_Updated 'Date_Updated' true true false 8 Date 0 0 ,First,#,\" + PhysicalTemp + \",\" + PHYSICAL + \"_Date_Updated,-1,-1;\" + \\\r\n                           \"Widening_Obstacle 'Widening_Obstacle' true true false 10 Text 0 0 ,First,#,\" + PhysicalTemp + \",\" + PHYSICAL + \"_Widening_Obstacle,-1,-1;\" + \\\r\n                           \"Widening_Potential 'Widening_Potential' true true false 8 Double 0 0 ,First,#,\" + PhysicalTemp + \",\" + PHYSICAL + \"_Widening_Potential,-1,-1;\" + \\\r\n                           \"UndividedLeftShoulderWidth 'UndividedLeftShoulderWidth' true true false 2 Short 0 0 ,First,#,\" + PhysicalTemp + \",\" + PHYSICAL + \"_UndividedLeftShoulderWidth,-1,-1;\" + \\\r\n                           \"UndividedLeftShoulderType 'UndividedLeftShoulderType' true true false 2 Short 0 0 ,First,#,\" + PhysicalTemp + \",\" + PHYSICAL + \"_UndividedLeftShoulderType,-1,-1\", \"\")\r\ngp.Delete_management(PhysicalTemp, \"\")\r\n\r\nProgressStep = ProgressStep + 1\r\ngp.SetProgressorLabel(\"Step \" + str(ProgressStep + 1) + \" of \" + str(NumProgressSteps))\r\ngp.SetProgressorPosition(ProgressStep)\r\n\r\n# Process: Transfer SurfaceType domain...\r\ngp.AddMessage(\"Getting Surface Type domain from source database...\")\r\ngp.DomainToTable_management(Source_GDB, \"dmnSurfaceType\", SurfaceType, \"CODE\", \"DESCRIPTION\", \"\")\r\n\r\ngp.AddMessage(\"...and putting it in transfer database...\")\r\ngp.TableToDomain_management(SurfaceType, \"CODE\", \"DESCRIPTION\", Xfer_GDB, \"dmnSurfaceType\", \"Codes for pavement surface type\", \"REPLACE\")\r\n\r\ngp.AddMessage(\"...and assigning it to appropriate field in PHYSICAL event table...\")\r\ngp.AssignDomainToField_management(Xfer_PHYSICAL, \"SurfaceType\", \"dmnSurfaceType\", \"\")\r\ngp.AssignDomainToField_management(Xfer_PropAndProg, \"SurfaceType\", \"dmnSurfaceType\", \"\")\r\ngp.AssignDomainToField_management(Xfer_Greenways, \"SurfaceType\", \"dmnSurfaceType\", \"\")\r\nProgressStep = ProgressStep + 1\r\ngp.SetProgressorLabel(\"Step \" + str(ProgressStep + 1) + \" of \" + str(NumProgressSteps))\r\ngp.SetProgressorPosition(ProgressStep)\r\n\r\n# Process: Add Attribute Index...\r\ngp.AddMessage(\"Indexing ROADSEGMENT_ID in PHYSICAL event table...\")\r\ngp.AddIndex_management(Xfer_PHYSICAL, \"RoadSegment_ID\", \"phy_seg_ID_idx\", \"NON_UNIQUE\", \"NON_ASCENDING\")\r\n\r\n# Process: Set up relationship classes between RoadSegments and the two event tables...\r\ngp.AddMessage(\"Creating relationship classes between RoadSegments and the BIKES and PHYSICAL event tables...\")\r\ngp.CreateRelationshipClass_management(Xfer_Roads, Xfer_BIKES, os.path.join(Xfer_GDB, \"RoadSegmentsToBikes\"), \"SIMPLE\", BIKES, \"Road Segments\", \"NONE\", \"ONE_TO_MANY\", \"NONE\", \\\r\n                                      \"ROADSEGMENT_ID\", \"RoadSegment_ID\", \"\", \"\")\r\ngp.CreateRelationshipClass_management(Xfer_Roads, Xfer_BIKES, os.path.join(Xfer_GDB, \"RoadSegmentsToPhysical\"), \"SIMPLE\", PHYSICAL, \"Road Segments\", \"NONE\", \"ONE_TO_MANY\", \"NONE\", \\\r\n                                      \"ROADSEGMENT_ID\", \"RoadSegment_ID\", \"\", \"\")\r\nProgressStep = ProgressStep + 1\r\ngp.SetProgressorLabel(\"Step \" + str(ProgressStep + 1) + \" of \" + str(NumProgressSteps))\r\ngp.SetProgressorPosition(ProgressStep)\r\n\r\n# Process: Compact transfer database...\r\ngp.AddMessage(\"Compacting transfer database...\")\r\ngp.Compact_management(Xfer_GDB)\r\n"]],"start1":0,"start2":0,"length1":0,"length2":24827}]],"length":24827}
