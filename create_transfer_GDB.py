# ---------------------------------------------------------------------------
# create_transfer_GDB.py
# Created on: Tue May 11 2010 08:35:24 AM
#   (generated by ArcGIS/ModelBuilder)
# ---------------------------------------------------------------------------

# Import system modules
import sys, string, os, arcpy
from datetime import datetime

# Create the Geoprocessor object
gp = arcpy
installDir = gp.GetInstallInfo("desktop").get("InstallDir")

# Load required toolboxes...
gp.AddToolbox(os.path.join(installDir, "ArcToolbox/Toolboxes/Conversion Tools.tbx"))
gp.AddToolbox(os.path.join(installDir, "ArcToolbox/Toolboxes/Data Management Tools.tbx"))
gp.AddToolbox(os.path.join(installDir, "ArcToolbox/Toolboxes/Analysis Tools.tbx"))
gp.env.overwriteOutput = 1
# gp.overwriteoutput = 1
gp.env.qualifiedFieldNames = False

# Parameters...
Xfer_folder = gp.GetParameterAsText(0)
if (Xfer_folder == "#" or Xfer_folder == ""):
    Xfer_folder = r"S:\HQ\Planning\DataResources\GISDevelopment\Bikes\DataTransfer\DataToCTPS"

Xfer_GDB_name = gp.GetParameterAsText(1)
if (Xfer_GDB_name == "#" or Xfer_GDB_name == ""):
    Xfer_GDB_name = "BikeDataXfer" + datetime.now().strftime('%Y%m%d_%H%M%S') + ".mdb"
else:
    if (os.path.splitext(Xfer_GDB_name)[1] != u'.mdb'):
        Xfer_GDB_name = Xfer_GDB_name + ".mdb"

Source_GDB = gp.GetParameterAsText(2)
if (Source_GDB == "#" or Source_GDB == ""):
    Source_GDB = r"Database Connections\Edit RoadInventory as Intern3.sde"

Source_2_GDB = gp.GetParameterAsText(3)
if (Source_2_GDB == "#" or Source_2_GDB == ""):
    if (gp.GetParameterAsText(2) != "#" and gp.GetParameterAsText(2) != ""):
        Source_2_GDB = Source_GDB
    else:
        Source_2_GDB = r"Database Connections\Planning Development.sde"

# Local variables...
ProgressStep = 0
NumProgressSteps = 19

Roads = "RoadSegments"
BIKES = "BIKES"
PHYSICAL = "PHYSICAL"
PropAndProg = "ProgrammedAndProposed_bikes"
Greenways = "Greenway_unpaved_bikes"
ProgIndPolys = "AttributesEnriched"
ProgIndPolys2 = "ProgAndProposed_reviewed"

Xfer_GDB = os.path.join(Xfer_folder, Xfer_GDB_name)
Source_Roads = os.path.join(Source_GDB, r"gisRoadInventory.GISADMIN.RoadInventoryCore\gisRoadInventory.GISADMIN." + Roads)
Source_BIKES = os.path.join(Source_GDB, r"gisRoadInventory.GISAdmin." + BIKES)
Source_PHYSICAL = os.path.join(Source_GDB, r"gisRoadInventory.GISAdmin." + PHYSICAL)
Source_PropAndProg = os.path.join(Source_2_GDB, r"gisdevelopment.GISPLANNER.BikeDevelopment\gisDevelopment.GISPLANNER." + PropAndProg)
Source_Greenways = os.path.join(Source_2_GDB, r"gisdevelopment.GISPLANNER.BikeDevelopment\gisDevelopment.GISPLANNER." + Greenways)
Source_ProgIndPolys = os.path.join(Source_2_GDB, r"gisdevelopment.GISPLANNER.BikeDevelopment\gisDevelopment.GISPLANNER." + ProgIndPolys)
Source_ProgIndPolys2 = os.path.join(Source_2_GDB, r"gisdevelopment.GISPLANNER.BikeDevelopment\gisDevelopment.GISPLANNER." + ProgIndPolys2)

BikeFacilityStatus = os.path.join(Xfer_GDB, "BikeFacilityStatus")
BikeFacilityType = os.path.join(Xfer_GDB, "BikeFacilityType")
SurfaceType = os.path.join(Xfer_GDB, "SurfaceType")
BayStateGreenway = os.path.join(Xfer_GDB, "BayStateGreenway")
YN = os.path.join(Xfer_GDB, "YN")

Xfer_Roads = os.path.join(Xfer_GDB, "RoadSegments")
Xfer_Roads_Layer = "RoadSegments_Layer"
Xfer_BIKES = os.path.join(Xfer_GDB, "BIKES")
Xfer_PHYSICAL = os.path.join(Xfer_GDB, "PHYSICAL")
Xfer_PropAndProg = os.path.join(Xfer_GDB, PropAndProg)
Xfer_Greenways = os.path.join(Xfer_GDB, Greenways)
Xfer_ProgIndPolys = os.path.join(Xfer_GDB, ProgIndPolys)
Xfer_ProgIndPolys2 = os.path.join(Xfer_GDB, ProgIndPolys2)

BikeSegsQuery = "BikeSegsQuery"
PhysicalQueryTable = "PhysicalQueryTable"
BikesQueryTable = "BikesQueryTable"

BikeSegsTemp = os.path.join(Xfer_GDB, "BikeSegsTemp")
BikeSegsTemp2 = os.path.join(Xfer_GDB, "BikeSegsTemp2")
PhysicalTemp = os.path.join(Xfer_GDB, "PhysicalTemp")

gp.SetProgressor("step", "Step " + str(ProgressStep + 1) + " of " + str(NumProgressSteps), 0, NumProgressSteps, 1)

# Process: Create Personal GDB...
gp.AddMessage("Creating transfer geodatabase " + Xfer_GDB + "...")
gp.CreatePersonalGDB_management(Xfer_folder, Xfer_GDB_name)
ProgressStep = ProgressStep + 1
gp.SetProgressorLabel("Step " + str(ProgressStep + 1) + " of " + str(NumProgressSteps))
gp.SetProgressorPosition(ProgressStep)

# Process: Copy ProgrammedAndProposed_bikes_final...
gp.AddMessage("Copying programmed and proposed bikes...")
gp.Copy_management(Source_PropAndProg, Xfer_PropAndProg, "Feature Class")
ProgressStep = ProgressStep + 1
gp.SetProgressorLabel("Step " + str(ProgressStep + 1) + " of " + str(NumProgressSteps))
gp.SetProgressorPosition(ProgressStep)

# Process: Copy Greenway_unpaved_bikes...
gp.AddMessage("Copying greenways (minimally improved trails)...")
gp.Copy_management(Source_Greenways, Xfer_Greenways, "Feature Class")
ProgressStep = ProgressStep + 1
gp.SetProgressorLabel("Step " + str(ProgressStep + 1) + " of " + str(NumProgressSteps))
gp.SetProgressorPosition(ProgressStep)

# Process: Copy AttributesEnriched progress indicator polygons...
gp.AddMessage("Copying progress indicator polygons...")
gp.Copy_management(Source_ProgIndPolys, Xfer_ProgIndPolys, "Feature Class")
gp.Copy_management(Source_ProgIndPolys2, Xfer_ProgIndPolys2, "Feature Class")
ProgressStep = ProgressStep + 1
gp.SetProgressorLabel("Step " + str(ProgressStep + 1) + " of " + str(NumProgressSteps))
gp.SetProgressorPosition(ProgressStep)

# Process: Copy BIKES events table...
gp.AddMessage("Copying complete BIKES event table...")
gp.TableToTable_conversion(Source_BIKES, Xfer_GDB, BIKES, "NOT BikeFacilityType IS NULL", "", "")
ProgressStep = ProgressStep + 1
gp.SetProgressorLabel("Step " + str(ProgressStep + 1) + " of " + str(NumProgressSteps))
gp.SetProgressorPosition(ProgressStep)

# Process: Index Seg ID in BIKES...
gp.AddMessage("Indexing the ROADSEGMENT_ID field in the copied BIKES events...")
gp.AddIndex_management(Xfer_BIKES, "RoadSegment_ID", "bikes_seg_idx", "NON_UNIQUE", "NON_ASCENDING")

# Process: Transfer BikeFacilityStatus domain...
gp.AddMessage("Getting Facility Status domain from source database...")
gp.DomainToTable_management(Source_GDB, "dmnBikeFacilityStatus", BikeFacilityStatus, "CODE", "DESCRIPTION", "")

gp.AddMessage("...and putting it in transfer database...")
gp.TableToDomain_management(BikeFacilityStatus, "CODE", "DESCRIPTION", Xfer_GDB, "dmnBikeFacilityStatus", "Codes for status of bicycle facilities", "REPLACE")

gp.AddMessage("...and assigning it to appropriate field in BIKES event table...")
gp.AssignDomainToField_management(Xfer_BIKES, "BikeFacilityStatus", "dmnBikeFacilityStatus", "")
ProgressStep = ProgressStep + 1
gp.SetProgressorLabel("Step " + str(ProgressStep + 1) + " of " + str(NumProgressSteps))
gp.SetProgressorPosition(ProgressStep)

# Process: Transfer BikeFacilityType domain...
gp.AddMessage("Getting Facility Type domain from source database...")
gp.DomainToTable_management(Source_GDB, "dmnBikeFacilityType", BikeFacilityType, "CODE", "DESCRIPTION", "")

gp.AddMessage("...and putting it in transfer database...")
gp.TableToDomain_management(BikeFacilityType, "CODE", "DESCRIPTION", Xfer_GDB, "dmnBikeFacilityType", "Codes for type of bicycle facility", "REPLACE")

gp.AddMessage("...and assigning it to appropriate fields...")
gp.AssignDomainToField_management(Xfer_BIKES, "BikeFacilityType", "dmnBikeFacilityType", "")
gp.AssignDomainToField_management(Xfer_PropAndProg, "BikeFacilityType", "dmnBikeFacilityType", "")
gp.AssignDomainToField_management(Xfer_Greenways, "BikeFacilityType", "dmnBikeFacilityType", "")
ProgressStep = ProgressStep + 1
gp.SetProgressorLabel("Step " + str(ProgressStep + 1) + " of " + str(NumProgressSteps))
gp.SetProgressorPosition(ProgressStep)

# Process: Transfer BayStateGreenway domain...
gp.AddMessage("Getting Bay State Greenway domain from source database...")
gp.DomainToTable_management(Source_GDB, "BayStateGreenway", BayStateGreenway, "CODE", "DESCRIPTION", "")

gp.AddMessage("...and putting it in transfer database...")
gp.TableToDomain_management(BayStateGreenway, "CODE", "DESCRIPTION", Xfer_GDB, "dmnBayStateGreenway", "Codes for Bay State Greenway corridors", "REPLACE")

gp.AddMessage("...and assigning it to appropriate fields...")
gp.AssignDomainToField_management(Xfer_BIKES, "BayStateGreenway", "dmnBayStateGreenway", "")
gp.AssignDomainToField_management(Xfer_PropAndProg, "BayStateGreenway", "dmnBayStateGreenway", "")
gp.AssignDomainToField_management(Xfer_Greenways, "BayStateGreenway", "dmnBayStateGreenway", "")
ProgressStep = ProgressStep + 1
gp.SetProgressorLabel("Step " + str(ProgressStep + 1) + " of " + str(NumProgressSteps))
gp.SetProgressorPosition(ProgressStep)

# Process: Transfer YN domain...
gp.AddMessage("Getting YN domain from source database...")
gp.DomainToTable_management(Source_GDB, "dmnYN", YN, "CODE", "DESCRIPTION", "")

gp.AddMessage("...and putting it in transfer database...")
gp.TableToDomain_management(YN, "CODE", "DESCRIPTION", Xfer_GDB, "dmnYN", "Codes for Yes/No", "REPLACE")

gp.AddMessage("...and assigning it to appropriate fields in BIKES event table...")
gp.AssignDomainToField_management(Xfer_BIKES, "BSGProposed", "dmnYN", "")
gp.AssignDomainToField_management(Xfer_BIKES, "BSGUltimate", "dmnYN", "")
gp.AssignDomainToField_management(Xfer_PropAndProg, "BSGProposed", "dmnYN", "")
gp.AssignDomainToField_management(Xfer_PropAndProg, "BSGUltimate", "dmnYN", "")
gp.AssignDomainToField_management(Xfer_Greenways, "BSGProposed", "dmnYN", "")
gp.AssignDomainToField_management(Xfer_Greenways, "BSGUltimate", "dmnYN", "")
ProgressStep = ProgressStep + 1
gp.SetProgressorLabel("Step " + str(ProgressStep + 1) + " of " + str(NumProgressSteps))
gp.SetProgressorPosition(ProgressStep)

# Process: Copy PHYSICAL event table...
gp.AddMessage("Copying complete PHYSICAL event table (will take a minute or two)...")
gp.TableToTable_conversion(Source_PHYSICAL, Xfer_GDB, PHYSICAL, "", "", "")
ProgressStep = ProgressStep + 1
gp.SetProgressorLabel("Step " + str(ProgressStep + 1) + " of " + str(NumProgressSteps))
gp.SetProgressorPosition(ProgressStep)

# Process: Copy RoadSegments...
gp.AddMessage("Copying all road segments (will take a minute or two)...")
gp.FeatureClassToFeatureClass_conversion(Source_Roads, Xfer_GDB, Roads, "", "", "")
ProgressStep = ProgressStep + 1
gp.SetProgressorLabel("Step " + str(ProgressStep + 1) + " of " + str(NumProgressSteps))
gp.SetProgressorPosition(ProgressStep)
gp.AddMessage("Copied road segments: " + str(gp.GetCount_management(Xfer_Roads)))

# Process: Index Seg ID in RoadSegments...
gp.AddMessage("Indexing the ROADSEGMENT_ID field in the copied road segments...")
gp.AddIndex_management(Xfer_Roads, "ROADSEGMENT_ID", "rd_seg_copy_seg_idx", "UNIQUE", "NON_ASCENDING")
ProgressStep = ProgressStep + 1
gp.SetProgressorLabel("Step " + str(ProgressStep + 1) + " of " + str(NumProgressSteps))
gp.SetProgressorPosition(ProgressStep)

# Process: Make Query Table...
gp.AddMessage("Creating view of road segments having bike events...")
gp.env.qualifiedFieldNames = True
gp.MakeQueryTable_management(Xfer_Roads + ";" + Xfer_BIKES, \
                             BikeSegsQuery, \
                             "USE_KEY_FIELDS", \
                             BIKES + ".OBJECTID", \
                             "", \
                             BIKES + ".RoadSegment_ID = " + Roads + ".ROADSEGMENT_ID")

# Process: Save query table to temporary feature class
gp.AddMessage("...and saving the view to a temporary feature class...")
gp.CopyFeatures_management(BikeSegsQuery, BikeSegsTemp)
gp.env.qualifiedFieldNames = False
gp.AddIndex_management(BikeSegsTemp, Roads + "_ROADSEGMENT_ID", "SEG_TMP_ID_idx", "NON_UNIQUE", "NON_ASCENDING")
##gp.AddMessage("Saved query table of road segments<->BIKE events: " + str(gp.GetCount_management(BikeSegsTemp)))
ProgressStep = ProgressStep + 1
gp.SetProgressorLabel("Step " + str(ProgressStep + 1) + " of " + str(NumProgressSteps))
gp.SetProgressorPosition(ProgressStep)

# Process: Create table of first OBJECTID for every ROADSEGMENT_ID
gp.AddMessage("...and identifying and removing duplicate ROADSEGMENTs...")
gp.MakeFeatureLayer_management(BikeSegsTemp, Xfer_Roads_Layer, "", "", "")
##gp.AddMessage("Feature layer of saved query table: " + str(gp.GetCount_management(Xfer_Roads_Layer)))
gp.Statistics_analysis(Xfer_Roads_Layer, BikeSegsTemp2, BIKES + "_OBJECTID FIRST", Roads + "_ROADSEGMENT_ID")
##gp.AddMessage("Statistics on ROADSEGMENT_ID: " + str(gp.GetCount_management(Xfer_Roads_Layer)))
gp.AddIndex_management(BikeSegsTemp2, Roads + "_ROADSEGMENT_ID", "SEG_TMP2_ID_idx", "UNIQUE", "NON_ASCENDING")
gp.AddIndex_management(BikeSegsTemp, BIKES + "_OBJECTID", "SEG_TMP_BOID_idx", "NON_UNIQUE", "NON_ASCENDING")
gp.AddJoin_management(Xfer_Roads_Layer, Roads + "_ROADSEGMENT_ID", BikeSegsTemp2, Roads + "_ROADSEGMENT_ID", "")
gp.SelectLayerByAttribute_management(Xfer_Roads_Layer, "NEW_SELECTION", "BikeSegsTemp.BIKES_OBJECTID <> BikeSegsTemp2.FIRST_BIKES_OBJECTID")
##gp.AddMessage("Selected query table rows: " + str(gp.GetCount_management(Xfer_Roads_Layer)))
gp.RemoveJoin_management(Xfer_Roads_Layer, "BikeSegsTemp2")
gp.DeleteFeatures_management(Xfer_Roads_Layer)
##gp.AddMessage("Remaining rows in saved query table: " + str(gp.GetCount_management(Xfer_Roads_Layer)))
ProgressStep = ProgressStep + 1
gp.SetProgressorLabel("Step " + str(ProgressStep + 1) + " of " + str(NumProgressSteps))
gp.SetProgressorPosition(ProgressStep)

# Process: Copy road segments to final feature class, cleaning up field names along the way...
gp.AddMessage("...and copying non-duplicates to final feature class...")
gp.FeatureClassToFeatureClass_conversion(BikeSegsTemp, Xfer_GDB, Roads, "", \
                                         "ROADSEGMENT_ID 'ROADSEGMENT_ID' true true false 4 Long 0 0 ,First,#," + BikeSegsTemp + "," + \
                                         Roads + "_ROADSEGMENT_ID,-1,-1;" + \
                                         "ODOMETER 'ODOMETER' true true false 8 Double 0 0 ,First,#," + BikeSegsTemp + "," + \
                                         Roads + "_ODOMETER,-1,-1;" + \
                                         "ASSIGNEDLENGTH 'ASSIGNEDLENGTH' true true false 8 Double 0 0 ,First,#," + BikeSegsTemp + "," + \
                                         Roads + "_ASSIGNEDLENGTH,-1,-1;" + \
                                         "ASSIGNEDLENGTHSOURCE 'ASSIGNEDLENGTHSOURCE' true true false 2 Short 0 0 ,First,#," + BikeSegsTemp + "," + \
                                         Roads + "_ASSIGNEDLENGTHSOURCE,-1,-1;" + \
                                         "STREETLIST_ID 'STREETLIST_ID' true true false 4 Long 0 0 ,First,#," + BikeSegsTemp + "," + \
                                         Roads + "_STREETLIST_ID,-1,-1;" + \
                                         "LIFECYCLESTATUS 'LIFECYCLESTATUS' true true false 2 Short 0 0 ,First,#," + BikeSegsTemp + "," + \
                                         Roads + "_LIFECYCLESTATUS,-1,-1;" + \
                                         "DateActive 'DateActive' true true false 8 Date 0 0 ,First,#," + BikeSegsTemp + "," + \
                                         Roads + "_DateActive,-1,-1;" + \
                                         "Enabled 'Enabled' true true false 2 Short 0 0 ,First,#," + BikeSegsTemp + "," + \
                                         Roads + "_Enabled,-1,-1;" + \
                                         "PrimaryRouteKey 'PrimaryRouteKey' true true false 20 Text 0 0 ,First,#," + BikeSegsTemp + "," + \
                                         Roads + "_PrimaryRouteKey,-1,-1;" + \
                                         "TMP_RT_NUM 'TMP_RT_NUM' true true false 50 Text 0 0 ,First,#," + BikeSegsTemp + "," + \
                                         Roads + "_TMP_RT_NUM,-1,-1;" + \
                                         "MileageCounted 'MileageCounted' true true false 2 Short 0 0 ,First,#," + BikeSegsTemp + "," + \
                                         Roads + "_MileageCounted,-1,-1;" + \
                                         "LINK_ID 'LINK_ID' true true false 8 Double 0 0 ,First,#," + BikeSegsTemp + "," + \
                                         Roads + "_LINK_ID,-1,-1;" + \
                                         "NavTeqLink 'NavTeqLink' true true false 1 Text 0 0 ,First,#," + BikeSegsTemp + "," + \
                                         Roads + "_NavTeqLink,-1,-1;" + \
                                         "Date_Updated 'Date_Updated' true true false 8 Date 0 0 ,First,#," + BikeSegsTemp + "," + \
                                         Roads + "_Date_Updated,-1,-1", "")
##gp.AddMessage("Rows in new road segments: " + str(gp.GetCount_management(Xfer_Roads)))

# Process: Clean up temporary RoadSegments objects...
gp.AddMessage("...and cleaning up temporary objects...")
gp.Delete_management(BikeSegsTemp, "")
gp.Delete_management(BikeSegsTemp2, "")
ProgressStep = ProgressStep + 1
gp.SetProgressorLabel("Step " + str(ProgressStep + 1) + " of " + str(NumProgressSteps))
gp.SetProgressorPosition(ProgressStep)

# Process: Add Attribute Index...
gp.AddMessage("Indexing ROADSEGMENT_ID in final feature class...")
gp.AddIndex_management(Xfer_Roads, "ROADSEGMENT_ID", "RI_SEG_ID_idx", "NON_UNIQUE", "NON_ASCENDING")

# Process: Make view of PHYSICAL event table...
gp.AddMessage("Creating view of PHYSICAL events table...")
##gp.MakeTableView_management(Xfer_PHYSICAL, PhysicalQueryTable, "", "", "")
gp.env.qualifiedFieldNames = True
gp.MakeQueryTable_management(Xfer_PHYSICAL + ";" + Xfer_Roads, \
                             PhysicalQueryTable, \
                             "USE_KEY_FIELDS", \
                             PHYSICAL + ".OBJECTID", \
                             "", \
                             PHYSICAL + ".RoadSegment_ID = " + Roads + ".ROADSEGMENT_ID")

# Process: Save view to temporary PHYSICAL table...
gp.AddMessage("...and saving view to temporary table...")
gp.CopyRows_management(PhysicalQueryTable, PhysicalTemp)
gp.env.qualifiedFieldNames = False

# Process: Copy to final table, cleaning up field names along the way...
gp.AddMessage("...and copying to final table, cleaning up field names along the way...")
gp.TableToTable_conversion(PhysicalTemp, Xfer_GDB, PHYSICAL, "", \
                           "RoadSegment_ID 'RoadSegment_ID' true true false 4 Long 0 0 ,First,#," + PhysicalTemp + "," + PHYSICAL + "_RoadSegment_ID,-1,-1;" + \
                           "FromMeasure 'FromMeasure' true true false 8 Double 0 0 ,First,#," + PhysicalTemp + "," + PHYSICAL + "_FromMeasure,-1,-1;" + \
                           "ToMeasure 'ToMeasure' true true false 8 Double 0 0 ,First,#," + PhysicalTemp + "," + PHYSICAL + "_ToMeasure,-1,-1;" + \
                           "LeftSidewalkWidth 'LeftSidewalkWidth' true true false 2 Short 0 0 ,First,#," + PhysicalTemp + "," + PHYSICAL + "_LeftSidewalkWidth,-1,-1;" + \
                           "RightSidewalkWidth 'RightSidewalkWidth' true true false 2 Short 0 0 ,First,#," + PhysicalTemp + "," + PHYSICAL + "_RightSidewalkWidth,-1,-1;" + \
                           "LeftShoulderWidth 'LeftShoulderWidth' true true false 2 Short 0 0 ,First,#," + PhysicalTemp + "," + PHYSICAL + "_LeftShoulderWidth,-1,-1;" + \
                           "LeftShoulderType 'LeftShoulderType' true true false 2 Short 0 0 ,First,#," + PhysicalTemp + "," + PHYSICAL + "_LeftShoulderType,-1,-1;" + \
                           "SurfaceWidth 'SurfaceWidth' true true false 2 Short 0 0 ,First,#," + PhysicalTemp + "," + PHYSICAL + "_SurfaceWidth,-1,-1;" + \
                           "SurfaceType 'SurfaceType' true true false 2 Short 0 0 ,First,#," + PhysicalTemp + "," + PHYSICAL + "_SurfaceType,-1,-1;" + \
                           "RightShoulderWidth 'RightShoulderWidth' true true false 2 Short 0 0 ,First,#," + PhysicalTemp + "," + PHYSICAL + "_RightShoulderWidth,-1,-1;" + \
                           "RightShoulderType 'RightShoulderType' true true false 2 Short 0 0 ,First,#," + PhysicalTemp + "," + PHYSICAL + "_RightShoulderType,-1,-1;" + \
                           "NumberOfTravelLanes 'NumberOfTravelLanes' true true false 2 Short 0 0 ,First,#," + PhysicalTemp + "," + PHYSICAL + "_NumberOfTravelLanes,-1,-1;" + \
                           "OppositeNumberOfTravelLanes 'OppositeNumberOfTravelLanes' true true false 2 Short 0 0 ,First,#," + PhysicalTemp + "," + PHYSICAL + "_OppositeNumberOfTravelLanes,-1,-1;" + \
                           "RightOfWayWidth 'RightOfWayWidth' true true false 2 Short 0 0 ,First,#," + PhysicalTemp + "," + PHYSICAL + "_RightOfWayWidth,-1,-1;" + \
                           "MedianWidth 'MedianWidth' true true false 2 Short 0 0 ,First,#," + PhysicalTemp + "," + PHYSICAL + "_MedianWidth,-1,-1;" + \
                           "MedianType 'MedianType' true true false 2 Short 0 0 ,First,#," + PhysicalTemp + "," + PHYSICAL + "_MedianType,-1,-1;" + \
                           "Offset 'Offset' true true false 2 Short 0 0 ,First,#," + PhysicalTemp + "," + PHYSICAL + "_Offset,-1,-1;" + \
                           "DateActive 'DateActive' true true false 8 Date 0 0 ,First,#," + PhysicalTemp + "," + PHYSICAL + "_DateActive,-1,-1;" + \
                           "Date_Updated 'Date_Updated' true true false 8 Date 0 0 ,First,#," + PhysicalTemp + "," + PHYSICAL + "_Date_Updated,-1,-1;" + \
                           "Widening_Obstacle 'Widening_Obstacle' true true false 10 Text 0 0 ,First,#," + PhysicalTemp + "," + PHYSICAL + "_Widening_Obstacle,-1,-1;" + \
                           "Widening_Potential 'Widening_Potential' true true false 8 Double 0 0 ,First,#," + PhysicalTemp + "," + PHYSICAL + "_Widening_Potential,-1,-1;" + \
                           "UndividedLeftShoulderWidth 'UndividedLeftShoulderWidth' true true false 2 Short 0 0 ,First,#," + PhysicalTemp + "," + PHYSICAL + "_UndividedLeftShoulderWidth,-1,-1;" + \
                           "UndividedLeftShoulderType 'UndividedLeftShoulderType' true true false 2 Short 0 0 ,First,#," + PhysicalTemp + "," + PHYSICAL + "_UndividedLeftShoulderType,-1,-1", "")
gp.Delete_management(PhysicalTemp, "")

ProgressStep = ProgressStep + 1
gp.SetProgressorLabel("Step " + str(ProgressStep + 1) + " of " + str(NumProgressSteps))
gp.SetProgressorPosition(ProgressStep)

# Process: Transfer SurfaceType domain...
gp.AddMessage("Getting Surface Type domain from source database...")
gp.DomainToTable_management(Source_GDB, "dmnSurfaceType", SurfaceType, "CODE", "DESCRIPTION", "")

gp.AddMessage("...and putting it in transfer database...")
gp.TableToDomain_management(SurfaceType, "CODE", "DESCRIPTION", Xfer_GDB, "dmnSurfaceType", "Codes for pavement surface type", "REPLACE")

gp.AddMessage("...and assigning it to appropriate field in PHYSICAL event table...")
gp.AssignDomainToField_management(Xfer_PHYSICAL, "SurfaceType", "dmnSurfaceType", "")
gp.AssignDomainToField_management(Xfer_PropAndProg, "SurfaceType", "dmnSurfaceType", "")
gp.AssignDomainToField_management(Xfer_Greenways, "SurfaceType", "dmnSurfaceType", "")
ProgressStep = ProgressStep + 1
gp.SetProgressorLabel("Step " + str(ProgressStep + 1) + " of " + str(NumProgressSteps))
gp.SetProgressorPosition(ProgressStep)

# Process: Add Attribute Index...
gp.AddMessage("Indexing ROADSEGMENT_ID in PHYSICAL event table...")
gp.AddIndex_management(Xfer_PHYSICAL, "RoadSegment_ID", "phy_seg_ID_idx", "NON_UNIQUE", "NON_ASCENDING")

# Process: Set up relationship classes between RoadSegments and the two event tables...
gp.AddMessage("Creating relationship classes between RoadSegments and the BIKES and PHYSICAL event tables...")
gp.CreateRelationshipClass_management(Xfer_Roads, Xfer_BIKES, os.path.join(Xfer_GDB, "RoadSegmentsToBikes"), "SIMPLE", BIKES, "Road Segments", "NONE", "ONE_TO_MANY", "NONE", \
                                      "ROADSEGMENT_ID", "RoadSegment_ID", "", "")
gp.CreateRelationshipClass_management(Xfer_Roads, Xfer_BIKES, os.path.join(Xfer_GDB, "RoadSegmentsToPhysical"), "SIMPLE", PHYSICAL, "Road Segments", "NONE", "ONE_TO_MANY", "NONE", \
                                      "ROADSEGMENT_ID", "RoadSegment_ID", "", "")
ProgressStep = ProgressStep + 1
gp.SetProgressorLabel("Step " + str(ProgressStep + 1) + " of " + str(NumProgressSteps))
gp.SetProgressorPosition(ProgressStep)

# Process: Compact transfer database...
gp.AddMessage("Compacting transfer database...")
gp.Compact_management(Xfer_GDB)
