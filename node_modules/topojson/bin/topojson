#!/usr/bin/env node

var path = require("path"),
    fs = require("fs"),
    optimist = require("optimist"),
    topojson = require("../");

var argv = optimist
    .usage("Usage: \033[1mtopojson\033[0m [options] [file â€¦]\n\n"

+ "Version: " + topojson.version + "\n\n"

+ "Converts the specified input GeoJSON or TopoJSON objects to TopoJSON,\n"
+ "outputting a single TopoJSON topology object. The `objects` property of\n"
+ "the output topology is a map from input file name to geometry object.")

    .options("o", {
      alias: "out",
      describe: "output TopoJSON file name",
      default: "/dev/stdout",
    })
    .options("q", {
      alias: "quantization",
      describe: "max. differentiable points in one dimension",
      default: 1e4,
    })
    .options("s", {
      alias: "simplify",
      describe: "precision threshold for Visvalingam simplification, in steradians",
      default: 0,
    })
    .options("simplify-proportion", {
      describe: "proportion of points to retain for Visvalingam simplification",
      default: 0,
    })
    .options("id-property", {
      describe: "name of feature property to promote to geometry id",
      default: null
    })
    .options("force-clockwise", {
      describe: "force exterior rings to be clockwise, and interior rings to be counterclockwise",
      type: "boolean",
      default: true
    })
    .options("p", {
      alias: "properties",
      describe: "feature properties to preserve; no name preserves all properties",
      default: false
    })
    .options("help", {
      describe: "display this helpful message",
      type: "boolean",
      default: false
    })
    .check(function(argv) {
      if (!argv._.length) throw new Error("input required");
      if (+argv.s && +argv.n) throw new Error("--simplify and --simplify-proportion are exclusive");
      if (typeof argv.p == "string") argv.p = argv.p.split(",");
    })
    .argv;

if (argv.help) return optimist.showHelp();

var objects = {},
    object,
    id = argv["id-property"],
    idType = /^\+/.test(id) ? (id = id.substring(1), function(d) { d = +d; return isNaN(d) ? undefined : d; }) : function(d) { return d; };

// Create a map from basename to JSON object.
// Convert TopoJSON back to GeoJSON in preparation for merge, as needed.
argv._.forEach(function(file) {
  object = JSON.parse(fs.readFileSync(file, "utf-8"));
  if (object.type === "Topology") {
    for (var key in object.objects) objects[key] = flatten(topojson.object(object, object.objects[key]));
  } else {
    objects[path.basename(file, path.extname(file))] = object;
  }
});

// Convert GeoJSON to TopoJSON.
object = topojson.topology(objects, {
  "quantization": +argv.q,
  "force-clockwise": !!argv["force-clockwise"],
  "id": id != null ? function(d) { return d.properties && idType(d.properties[id]); } : function(d) { return d.id; },
  "property-filter": argv.p === true ? function(d) { return d; }
      : argv.p === false ? function() { return null }
      : (function() { var o = {}; argv.p.forEach(function(k) { var i = k.indexOf("="), v = k; if (i >= 0) v = k.slice(i + 1), k = k.slice(0, i); o[k] = v; }); return function(d) { return o[d]; }; })()
});

// Simplify.
if (+argv.s > 0 || +argv.n > 0) topojson.simplify(object, {
  "minimum-area": +argv.s,
  "retain-proportion": +argv.n
});

// Output JSON.
var json = JSON.stringify(object);
if (argv.o === "/dev/stdout") fs.appendFileSync(argv.o, json, "utf8");
else fs.writeFileSync(argv.o, json, "utf8");

// Unfortunately, JSON.stringify ignores inherited properties.
function flatten(object) {
  for (var k in object) {
    if (!object.hasOwnProperty(k)) object[k] = object[k];
    if (typeof object[k] === "object") flatten(object[k]);
  }
  return object;
}
